/*
 * This is a module that plugs into the Wiggle Spine.
 * The format is JSON, but comments are allowed.
 *
 * The "Wiggle Out" module has 2x speaker outputs, driven by
 * the TI TAS5760 digital-input class D amplifier. Output power
 * depends on speaker impedance and power supply voltage,
 * typically 20-40 watts per channel.
 *
 * The TAS5760 has I2S audio and I2C control ports, which we
 * can glue to the internal streams in the Wiggle Spine. The
 * module's high speed synchronous data port is used as I2S
 * data out, and the other necessary sync signals are derived
 * from the outputCounter.
 */

{
    "name": "wiggle-out",
    "version": "1.0.0",
    "description": "Wiggle Out is a 2-channel class D amplifier",
    "homepage": "http://wiggleport.org",
    "license": "MIT",

    // Glue logic modules written in Verilog, instantiated below
    "files": [ "wiggle-out.v" ],

    /*
     * Module interface
     *
     * The module's interface describes what sort of slot it fits into, and when it can load.
     * If this module finds an attachment point with matching "class" and "detect" details,
     * the other objects here will be added to that attachment point.
     */

    "interface": {

        "class": "wigglemod",
        "detect": { },

        "streams": {
            "outputDataStream": {
                "pattern": [
                    // Take each 24-bit sample in turn
                    // (MSB first, hence the reverse-split).
                    ["repeat", 24, ["rsplit", "outputA", 1] ],
                    ["repeat", 24, ["rsplit", "outputB", 1] ]
                ]
            },
         }
    },

    /*
     * Clock rates
     *
     * The sampleClock can be set among a few choices, and the bitClock will
     * follow at a 48x multiple so we can transmit two stereo 24-bit samples.
     */

    "clocks": {

        "sampleClock": {
            "syncWith": "outputClock",
            "rateList": [ 32000, 44100, 48000, 88200, 96000 ],
            "rateDefault": 48000
        },

        "bitClock": {
            // Always 48x the sample clock
            "syncWith": "sampleClock",
            "rateMultiple": 48
        }
    },

    /*
     * Audio streams
     */

    "streams": {

        "outputA": {
            "rate": "sampleClock",
            "width": 24,                // 24-bit PCM audio
            "pattern": [ 0 ],           // Silence when idle
            "buffer": 288000000,        // Buffer size in bits (250ms * 48000 sample/sec * 24 bit/sample)
        },

        "outputB": {
            "rate": "sampleClock",
            "width": 24,                // 24-bit PCM audio
            "pattern": [ 0 ],           // Silence when idle
            "buffer": 288000000,        // Buffer size in bits (250ms * 48000 sample/sec * 24 bit/sample)
        }
    }
}
